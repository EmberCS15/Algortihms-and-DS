Theory

1)Master Method - 
Only applicable for recursions of the form of T(n)=aT(n/b)+f(n) where a>=1 and b>1
Master method relies on the which of the following two functions are greater asymptotically as well as polynomially - 
	Function G(n)=n^(logb(a)){log base b}
	Function f(n) from the definig equation

1) if f(n) is less then G(n) asymptotically then T(n) = G(n)
2) if f(n)=G(n) then T(n)=G(n)lg(n)
3) if f(n) is asymptotically as well as polynomially greater then G(n) then T(n)=f(n)

Only in these cases will master method apply
Ex-1 - T(n)=4T(n/2)+O(n)
G(n) = n^2
f(n)=n
Since G(n)>f(n),T(n) = &Theta;(G(n)) = &Theta;(n^2)

Ex-2 - T(n)=2T(n/2)+O(n)
G(n)=n
f(n)=n
Case 2 applies - T(n)=&Theta;(G(n)lgn) = &Theta;(nlgn)

Ex-3 - T(n)=2T(n/8)+O(n^2)
G(n)=n^(1/3)
f(n)=n^3
G(n) is asymptotically as well as polynomially smaller then f(n)
So T(n) = &Theta;(f(n)) = &Theta;(n^2)

Ex-4 - T(n)=2T(n/2)+nlgn
G(n)=n
f(n)=nlgn
althought f(n) is asymptotically greater then G(n) but the polynomial part of f(n) is not greater then G(n)
Hence we cannot apply any of the cases.


DFS Classification of Edges -

Another interesting property of depth-first search is that the search can be used
to classify the edges of the input graph G=(V,E). The type of each edge can
provide important information about a graph. For example, in the next section, we
shall see that a directed graph is acyclic if and only if a depth-first search yields no
“back” edges (Lemma 22.11).
We can define four edge types in terms of the depth-first forest G produced by
a depth-first search on G:
1. Tree edges are edges in the depth-first forest of graph G . Edge (u,v) is a tree edge if v
was first discovered by exploring edge (u,v).
2. Back edges are those edges (u,v) connecting a vertex u to an ancestor v in a
depth-first tree. We consider self-loops, which may occur in directed graphs, to
be back edges.
3. Forward edges are those nontree edges (u,v) connecting a vertex u to a de-
scendant v in a depth-first tree.
4. Cross edges are all other edges. They can go between vertices in the same
depth-first tree, as long as one vertex is not an ancestor of the other, or they can or they can go between vertices in different depth-first trees.

In a depth-first search of an undirected graph G, every edge of G is either a tree
edge or a back edge.

Breadth First Search - Articulation points, bridges, and biconnected components

Let G=(V,E) be a connected, undirected graph. An articulation point of G is
a vertex whose removal disconnects G. A bridge of G is an edge whose removal
disconnects G. A biconnected component of G is a maximal set of edges such
that any two edges in the set lie on a common simple cycle. Figure 22.10 illustrates

Topological Sort - 
This section shows how we can use depth-first search to perform a topological sort
of a directed acyclic graph, or a “dag” as it is sometimes called. A topological sort
of a dag G = (E,V) is a linear ordering of all its vertices such that if G contains an
edge (u,v) then u appears before v in the ordering. (If the graph contains a cycle,
then no linear ordering is possible.)


Strongly Connected Components - 
a strongly connected component of a directed
graph G=(V,E) is a maximal set of vertices C subset of V such that for every pair
of vertices u and v in C , we have both u~>v and v~>u that is, vertices u and v
are reachable from each other.If there exists a path from u to v then there also exists a path from v to u.

Euler tour - 
An Euler tour of a strongly connected, directed graph G D .V; E/ is a cycle that
traverses each edge of G exactly once, although it may visit a vertex more than
once.
a. Show that G has an Euler tour if and only if in-degree(v) = out-degree(v) for
each vertex v belongs to V .


AVL Trees - 
AVL tree is a self balancing binary search tree where the difference between heights of right and left subtrees cannot be more then 1 for all nodes.Most of the BST operations (e.g., search, max, min, insert, delete.. etc) take O(h) time where h is the height of the BST. The cost of these operations may become O(n) for a skewed Binary tree. If we make sure that height of the tree remains O(Logn) after every insertion and deletion, then we can guarantee an upper bound of O(Logn) for all these operations. The height of an AVL tree is always O(Logn) where n is the number of nodes in the tree.

In avl trees insertion uses rotation.

LONGEST PATH IN A TREE - 
Given a binary tree, find its maximum depth.

The maximum depth of a binary tree is the number of nodes along the longest path from the root node down to the farthest leaf node.Max path is the path from root to the DEEPEST left node, not nearest.

ZIGZAG level Traversal
Given a binary tree, return the zigzag level order traversal of its nodes’ values. (ie, from left to right, then right to left for the next level and alternate between).

Cartesian tree : is a heap ordered binary tree, where the root is greater than all the elements in the subtree. 

